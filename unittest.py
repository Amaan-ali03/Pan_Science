# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14hcnvyR1SSl9fsC4mLxrM0AZchOXc_MO
"""

import unittest
import sys
import os

# Add module path to sys.path to locate name_disambiguator
module_path = os.path.abspath(os.path.dirname(__file__)) if '__file__' in globals() else os.getcwd()
sys.path.insert(0, module_path)

# Check if name_disambiguator.py exists before importing
if not os.path.exists(os.path.join(module_path, "name_disambiguator.py")):
    raise ModuleNotFoundError("Could not find 'name_disambiguator.py'. Ensure it's in the correct directory.")

from name_disambiguator import NameDisambiguator

class TestNameDisambiguator(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        """Initialize NameDisambiguator instance with a test CSV file."""
        cls.disambiguator = NameDisambiguator("test_company_data.csv")

    def test_parse_structured_input(self):
        """Check parsing of structured inputs like 'EXCHANGE:TICKER'."""
        self.assertEqual(self.disambiguator.parse_structured_input("NASDAQ:AAPL"), ("Apple Inc.", "AAPL", "NASDAQ"))
        self.assertEqual(self.disambiguator.parse_structured_input("NYSE:MSFT"), ("Microsoft Corp.", "MSFT", "NYSE"))
        self.assertIsNone(self.disambiguator.parse_structured_input("INVALID:XYZ"))

    def test_parse_unstructured_input(self):
        """Verify unstructured inputs like company names resolve correctly."""
        self.assertEqual(self.disambiguator.parse_unstructured_input("Tesla"), ("Tesla, Inc.", "TSLA", "NASDAQ"))
        self.assertEqual(self.disambiguator.parse_unstructured_input("Google"), ("Alphabet Inc.", "GOOGL", "NASDAQ"))
        self.assertIsNone(self.disambiguator.parse_unstructured_input("RandomText"))

    def test_disambiguate(self):
        """Ensure disambiguation logic works for both structured and unstructured inputs."""
        self.assertEqual(self.disambiguator.disambiguate("NASDAQ:AAPL"), ("Apple Inc.", "AAPL", "NASDAQ"))
        self.assertEqual(self.disambiguator.disambiguate("Tesla"), ("Tesla, Inc.", "TSLA", "NASDAQ"))
        self.assertIsNone(self.disambiguator.disambiguate("RandomText"))

    def test_missing_database(self):
        """Confirm FileNotFoundError is raised when database is missing."""
        with self.assertRaises(FileNotFoundError):
            NameDisambiguator("non_existent_file.csv")

    def test_case_insensitivity(self):
        """Check if the function handles case-insensitive inputs correctly."""
        self.assertEqual(self.disambiguator.disambiguate("nasdaq:aapl"), ("Apple Inc.", "AAPL", "NASDAQ"))
        self.assertEqual(self.disambiguator.disambiguate("tesla"), ("Tesla, Inc.", "TSLA", "NASDAQ"))

    def test_partial_match_failure(self):
        """Ensure partial matches do not return incorrect results."""
        self.assertIsNone(self.disambiguator.disambiguate("Tes"))
        self.assertIsNone(self.disambiguator.disambiguate("AAP"))

if __name__ == "__main__":
    unittest.main()

